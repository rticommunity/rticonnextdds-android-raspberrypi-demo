/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/

/* BMP_temp_pressure_subscriber.cxx

 A subscription example

 This file is derived from code automatically generated by the rtiddsgen
 command:

 rtiddsgen -language C++ -example <arch> BMP_temp_pressure.idl

 Example subscription of type BMP_pressure_range automatically generated by
 'rtiddsgen'. To test them follow these steps:

 (1) Compile this file and the example publication.

 (2) Start the subscription with the command
 objs/<arch>/BMP_temp_pressure_subscriber <domain_id> <sample_count>

 (3) Start the publication with the command
 objs/<arch>/BMP_temp_pressure_publisher <domain_id> <sample_count>

 (4) [Optional] Specify the list of discovery initial peers and
 multicast receive addresses via an environment variable or a file
 (in the current working directory) called NDDS_DISCOVERY_PEERS.

 You can run any number of publishers and subscribers programs, and can
 add and remove them dynamically from the domain.


 Example:

 To run the example application on domain <domain_id>:

 On Unix:

 objs/<arch>/BMP_temp_pressure_publisher <domain_id>
 objs/<arch>/BMP_temp_pressure_subscriber <domain_id>

 On Windows:

 objs\<arch>\BMP_temp_pressure_publisher <domain_id>
 objs\<arch>\BMP_temp_pressure_subscriber <domain_id>


 modification history
 ------------ -------
 */

#include <stdio.h>
#include <stdlib.h>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "BMP_temp_pressure.h"
#include "BMP_temp_pressureSupport.h"
#include "ndds/ndds_cpp.h"

#include <iostream>
#include <cstdlib>
#include <pthread.h>

long mPressure_high = 120.0;
long mPressure_low = 10.0;

pthread_mutex_t mutexAplay;

void InitMutexAplay() {
	if (pthread_mutex_init(&mutexAplay, NULL) != 0) {
		printf("\n mutexAplay init failed\n");
		return 1;
	}
}

class BMP_pressureListener: public DDSDataReaderListener {
public:
	virtual void on_requested_deadline_missed(DDSDataReader* /*reader*/,
			const DDS_RequestedDeadlineMissedStatus& /*status*/) {
	}

	virtual void on_requested_incompatible_qos(DDSDataReader* /*reader*/,
			const DDS_RequestedIncompatibleQosStatus& /*status*/) {
	}

	virtual void on_sample_rejected(DDSDataReader* /*reader*/,
			const DDS_SampleRejectedStatus& /*status*/) {
	}

	virtual void on_liveliness_changed(DDSDataReader* /*reader*/,
			const DDS_LivelinessChangedStatus& /*status*/) {
	}

	virtual void on_sample_lost(DDSDataReader* /*reader*/,
			const DDS_SampleLostStatus& /*status*/) {
	}

	virtual void on_subscription_matched(DDSDataReader* /*reader*/,
			const DDS_SubscriptionMatchedStatus& /*status*/) {
	}

	virtual void on_data_available(DDSDataReader* reader);
};

void *PlayAlarmSound(void *threadid) {

	pthread_mutex_lock(&mutexAplay);

	system("aplay ~/sound_wav/disco_5.wav");
	//change ~/sound_wav/disco_5.wav file to any 2-3 sec audio file

	pthread_mutex_unlock(&mutexAplay);
	pthread_mutex_destroy(&mutexAplay);

	pthread_exit (NULL);

	return NULL;
}
void BMP_pressureListener::on_data_available(DDSDataReader* reader) {
}

class BMP_pressure_rangeListener: public DDSDataReaderListener {
public:
	virtual void on_requested_deadline_missed(DDSDataReader* /*reader*/,
			const DDS_RequestedDeadlineMissedStatus& /*status*/) {
	}

	virtual void on_requested_incompatible_qos(DDSDataReader* /*reader*/,
			const DDS_RequestedIncompatibleQosStatus& /*status*/) {
	}

	virtual void on_sample_rejected(DDSDataReader* /*reader*/,
			const DDS_SampleRejectedStatus& /*status*/) {
	}

	virtual void on_liveliness_changed(DDSDataReader* /*reader*/,
			const DDS_LivelinessChangedStatus& /*status*/) {
	}

	virtual void on_sample_lost(DDSDataReader* /*reader*/,
			const DDS_SampleLostStatus& /*status*/) {
	}

	virtual void on_subscription_matched(DDSDataReader* /*reader*/,
			const DDS_SubscriptionMatchedStatus& /*status*/) {
	}

	virtual void on_data_available(DDSDataReader* reader);

};

void BMP_pressure_rangeListener::on_data_available(DDSDataReader* reader) {
	BMP_pressure_rangeDataReader *BMP_pressure_range_reader = NULL;
	BMP_pressure_rangeSeq data_seq;
	DDS_SampleInfoSeq info_seq;
	DDS_ReturnCode_t retcode;
	int i;

	BMP_pressure_range_reader = BMP_pressure_rangeDataReader::narrow(reader);
	if (BMP_pressure_range_reader == NULL) {
		printf("DataReader narrow error\n");
		return;
	}

	retcode = BMP_pressure_range_reader->take(data_seq, info_seq,
			DDS_LENGTH_UNLIMITED, DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE,
			DDS_ANY_INSTANCE_STATE);

	if (retcode == DDS_RETCODE_NO_DATA) {
		return;
	} else if (retcode != DDS_RETCODE_OK) {
		printf("take error %d\n", retcode);
		return;
	}

	for (i = 0; i < data_seq.length(); ++i) {
		if (info_seq[i].valid_data) {
			mPressure_high = data_seq[i].Pressure_high;
			mPressure_low = data_seq[i].Pressure_low;
			printf("Alarm Set to mPressure_high=%d\n", mPressure_high);
			printf("Alarm Set to mPressure_low=%d\n", mPressure_low);
		}
	}

	retcode = BMP_pressure_range_reader->return_loan(data_seq, info_seq);
	if (retcode != DDS_RETCODE_OK) {
		printf("return loan error %d\n", retcode);
	}
}

/* Delete all entities */
static int subscriber_shutdown(DDSDomainParticipant *participant) {
	DDS_ReturnCode_t retcode;
	int status = 0;

	if (participant != NULL) {
		retcode = participant->delete_contained_entities();
		if (retcode != DDS_RETCODE_OK) {
			printf("delete_contained_entities error %d\n", retcode);
			status = -1;
		}

		retcode = DDSTheParticipantFactory->delete_participant(participant);
		if (retcode != DDS_RETCODE_OK) {
			printf("delete_participant error %d\n", retcode);
			status = -1;
		}
	}

	/* RTI Connext provides the finalize_instance() method on
	 domain participant factory for people who want to release memory used
	 by the participant factory. Uncomment the following block of code for
	 clean destruction of the singleton. */
	/*
	 retcode = DDSDomainParticipantFactory::finalize_instance();
	 if (retcode != DDS_RETCODE_OK) {
	 printf("finalize_instance error %d\n", retcode);
	 status = -1;
	 }
	 */
	return status;
}

extern "C" int subscriber_main(int domainId, int sample_count) {
	DDSDomainParticipant *participant = NULL;
	DDSSubscriber *subscriber = NULL;
	DDSTopic *topic = NULL;
	BMP_pressure_rangeListener *reader_listener = NULL;
	DDSDataReader *reader = NULL;

	DDSSubscriber *subscriber2 = NULL;
	DDSTopic *topic2 = NULL;
	BMP_pressureListener *reader_listener2 = NULL;
	DDSDataReader *reader2 = NULL;

	DDS_ReturnCode_t retcode;
	const char *type_name = NULL;
	const char *type_name2 = NULL;
	int count = 0;
	DDS_Duration_t receive_period = { 0, 1000000 }; //10000000
	DDS_Duration_t play_period = { 3, 0 };
	int status = 0;

	/* To customize the participant QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	participant = DDSTheParticipantFactory->create_participant(domainId,
			DDS_PARTICIPANT_QOS_DEFAULT, NULL /* listener */,
			DDS_STATUS_MASK_NONE);
	if (participant == NULL) {
		printf("create_participant error\n");
		subscriber_shutdown(participant);
		return -1;
	}

	/* To customize the subscriber QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	subscriber = participant->create_subscriber(DDS_SUBSCRIBER_QOS_DEFAULT,
			NULL /* listener */, DDS_STATUS_MASK_NONE);
	if (subscriber == NULL) {
		printf("create_subscriber error\n");
		subscriber_shutdown(participant);
		return -1;
	}

	/* Register the type before creating the topic */
	type_name = BMP_pressure_rangeTypeSupport::get_type_name();
	retcode = BMP_pressure_rangeTypeSupport::register_type(participant,
			type_name);
	if (retcode != DDS_RETCODE_OK) {
		printf("register_type error %d\n", retcode);
		subscriber_shutdown(participant);
		return -1;
	}

	/* To customize the topic QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	topic = participant->create_topic("Example BMP_pressure_range", type_name,
			DDS_TOPIC_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
	if (topic == NULL) {
		printf("create_topic error\n");
		subscriber_shutdown(participant);
		return -1;
	}

	/* Create a data reader listener */
	reader_listener = new BMP_pressure_rangeListener();

	/* To customize the data reader QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	reader = subscriber->create_datareader(topic, DDS_DATAREADER_QOS_DEFAULT,
			reader_listener, DDS_STATUS_MASK_ALL);
	if (reader == NULL) {
		printf("create_datareader error\n");
		subscriber_shutdown(participant);
		delete reader_listener;
		return -1;
	}

	// -----Example BMP_pressure----
	/* To customize the subscriber QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	subscriber2 = participant->create_subscriber(DDS_SUBSCRIBER_QOS_DEFAULT,
			NULL /* listener */, DDS_STATUS_MASK_NONE);
	if (subscriber2 == NULL) {
		printf("create_subscriber error\n");
		subscriber_shutdown(participant);
		return -1;
	}

	/* Register the type before creating the topic */
	type_name2 = BMP_pressureTypeSupport::get_type_name();
	retcode = BMP_pressureTypeSupport::register_type(participant, type_name2);
	if (retcode != DDS_RETCODE_OK) {
		printf("register_type error %d\n", retcode);
		subscriber_shutdown(participant);
		return -1;
	}

	/* To customize the topic QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	topic2 = participant->create_topic("Example BMP_pressure", type_name2,
			DDS_TOPIC_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
	if (topic2 == NULL) {
		printf("create_topic error\n");
		subscriber_shutdown(participant);
		return -1;
	}

	/* Create a data reader listener */
	// reader_listener2 = new BMP_pressureListener();
	/* To customize the data reader QoS, use
	 the configuration file USER_QOS_PROFILES.xml */
	reader2 = subscriber2->create_datareader(topic2, DDS_DATAREADER_QOS_DEFAULT,
			NULL, DDS_STATUS_MASK_NONE);
	if (reader2 == NULL) {
		printf("create_datareader2 error\n");
		subscriber_shutdown(participant);
		//delete reader_listener2;
		return -1;
	}

	BMP_pressureDataReader *BMP_pressure_reader = NULL;
	BMP_pressure_reader = BMP_pressureDataReader::narrow(reader2);
	if (BMP_pressure_reader == NULL) {
		printf("DataReader narrow error\n");
		return -1;
	}

	while (1) {

		BMP_pressureSeq data_seq;
		DDS_SampleInfoSeq info_seq;
		//DDS_ReturnCode_t retcode;

		retcode = BMP_pressure_reader->take(data_seq, info_seq,
				DDS_LENGTH_UNLIMITED, DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE,
				DDS_ANY_INSTANCE_STATE);

		if (retcode == DDS_RETCODE_NO_DATA) {
			/// Not an error
			continue;
		} else if (retcode != DDS_RETCODE_OK) {
			// Is an error
			printf("take error: %d\n", retcode);
			break;
		}
		int rc;
		pthread_t threads;

		bool flag_set = false;

		for (int i = 0; i < data_seq.length(); ++i) {

			if (info_seq[i].valid_data) {

				if ((data_seq[i].Pressure >= mPressure_high)
						|| (data_seq[i].Pressure <= mPressure_low)) {
					flag_set = true;
					printf("Alarm! Sensor ID=%s\n", data_seq[i].id);
					printf("Alarm! Pressure=%f\n", data_seq[i].Pressure);
					//printf("data_seq.length()=%d\n",data_seq.length());
					break;
				}
			}
		}
		if (flag_set) {
			InitMutexAplay();
			rc = pthread_create(&threads, NULL, PlayAlarmSound, (void *) 0);
			if (rc) {
				printf("Error:unable to create thread =%d", rc);
				exit(-1);
			}
			pthread_detach(threads);
			NDDSUtility::sleep(play_period);
		}

		retcode = BMP_pressure_reader->return_loan(data_seq, info_seq);
		if (retcode != DDS_RETCODE_OK) {
			printf("return loan error %d\n", retcode);
		}

		NDDSUtility::sleep(receive_period);
	}

	/* Delete all entities */
	status = subscriber_shutdown(participant);
	delete reader_listener;

	return status;
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
	int domainId = 0;
	int sample_count = 0; /* infinite loop */

	if (argc >= 2) {
		domainId = _wtoi(argv[1]);
	}
	if (argc >= 3) {
		sample_count = _wtoi(argv[2]);
	}

	/* Uncomment this to turn on additional logging
	 NDDSConfigLogger::get_instance()->
	 set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API,
	 NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
	 */

	return subscriber_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[]) {
	int domainId = 0;
	int sample_count = 0; /* infinite loop */

	if (argc >= 2) {
		domainId = atoi(argv[1]);
	}
	if (argc >= 3) {
		sample_count = atoi(argv[2]);
	}

	/* Uncomment this to turn on additional logging
	 NDDSConfigLogger::get_instance()->
	 set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API,
	 NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
	 */

	return subscriber_main(domainId, sample_count);
}
#endif

#ifdef RTI_VX653
const unsigned char* __ctype = *(__ctypePtrGet());

extern "C" void usrAppInit ()
{
#ifdef  USER_APPL_INIT
	USER_APPL_INIT; /* for backwards compatibility */
#endif

	/* add application specific code here */
	taskSpawn("sub", RTI_OSAPI_THREAD_PRIORITY_NORMAL, 0x8, 0x150000, (FUNCPTR)subscriber_main, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

}
#endif

